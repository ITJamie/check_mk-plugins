# --------------------------------------------------------------------------------
# 1. Fibre Alliance port info
# Polls the .1.3.6.1.3.94.1.10 oid, FCMGMT-MIB::connUnitPortTable
# "Generic information on ports for a specific connUnit."
# Reads:
#  .1.3.6.1.3.94.1.10.1.1, FCMGMT-MIB::connUnitPortUnitId, OCTET STRING (16)
#  .1.3.6.1.3.94.1.10.1.2, FCMGMT-MIB::connUnitPortIndex, INTEGER (1..2147483647)
#  .1.3.6.1.3.94.1.10.1.3, FCMGMT-MIB::connUnitPortType, INTEGER {unknown(1), other(2), not-present(3), hub-port(4), n-port(5), nl-port(6), fl-port(7), f-port(8), e-port(9), g-port(10), domain-ctl(11), hub-controller(12), scsi(13), escon(14), lan(15), wan(16), ac(17), dc(18), ssa(19), wdm(20), ib(21), ipstore(22)}
#  .1.3.6.1.3.94.1.10.1.6, FCMGMT-MIB::connUnitPortState, INTEGER {unknown(1), online(2), offline(3), bypassed(4), diagnostics(5)}
#  .1.3.6.1.3.94.1.10.1.7, FCMGMT-MIB::connUnitPortStatus, INTEGER {unknown(1), unused(2), ready(3), warning(4), failure(5), notparticipating(6), initializing(7), bypass(8), ols(9), other(10)}
#  .1.3.6.1.3.94.1.10.1.8, FCMGMT-MIB::connUnitPortTransmitterType, INTEGER {unknown(1), other(2), unused(3), shortwave(4), longwave(5), copper(6), scsi(7), longwaveNoOFC(8), shortwaveNoOFC(9), longwaveLED(10), ssa(11)}
#  .1.3.6.1.3.94.1.10.1.9, FCMGMT-MIB::connUnitPortModuleType, INTEGER {unknown(1), other(2), gbic(3), embedded(4), glm(5), gbicSerialId(6), gbicNoSerialId(7), gbicNotInstalled(8), smallFormFactor(9)}
#  .1.3.6.1.3.94.1.10.1.15, FCMGMT-MIB::connUnitPortSpeed, INTEGER
#  .1.3.6.1.3.94.1.10.1.23, FCMGMT-MIB::FCMGMT-MIB::connUnitPortHWState, INTEGER {unknown(1), failed(2), bypassed(3), active(4), loopback(5), txfault(6), noMedia(7), linkDown(8)}
check_default_levels["fibrealliance_port"] = "fibrealliance_port_default_levels"
factory_settings["fibrealliance_port_default_levels"] = {
    "allowed_states" : [ 2, 3, 4, 5 ],
}

def inventory_fibrealliance_port(checkname, info):
  inventory = []
  for id, index, type, state, status, transmitter, module, speed, hwstate in info:
    if state != "1"
      inventory.append( (index, {"state": state, "status": status, "transmitter": transmitter, "module": module, "speed": speed, "hwstate": hwstate}) )
  return inventory

def check_fibrealliance_port(item, params, info):
  for id, index, type, state, status, transmitter, module, speed, hwstate in info:
    if index == item:
      if status == params["status"]:
        return (0, "OK - " + speed + "mps")
      elif status == "3":
        return (1, "WARN - port used, but should not be")
      else:
        return (2, "CRITICAL - " + speed + "mps")

  return (3, "UNKNOWN - Port info not found")

check_info["fibrealliance_port"] = \
  (check_fibrealliance_port, "Port %s", 0, inventory_fibrealliance_port)

snmp_info["fibrealliance_port"] = ( ".1.3.6.1.3.94.1.10.1", [ "1", "2", "3", "6", "7", "8", "9", "15", "23" ] )
snmp_scan_functions['fibrealliance_port'] = \
  lambda oid: oid(".1.3.6.1.3.94.1.1.0") != None
