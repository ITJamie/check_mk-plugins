#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>
# --------------------------------------------------------------------------------
# 1. Fibre Channel physical info
# Polls the .1.3.6.1.2.1.75.1.2.2.1 oid, FIBRE-CHANNEL-FE-MIB::fcFxPortPhysTable
# "A table that contains, one entry for each FxPort in the Fabric Element, physical level
#    status and parameters of the FxPorts."
# .1.3.6.1.2.1.75.1.1.5.1 fcFxPortTable
# .1.3.6.1.2.1.75.1.2.1.1 fcFxPortStatusTable
# .1.3.6.1.2.1.75.1.2.2.1 fcFxPortPhysTable
# .1.3.6.1.2.1.75.1.2.3.1	fcFxLoginTable
# fcFeError
# .1.3.6.1.2.1.75.1.3.1.1	fcFxPortErrorTable
# fcFeAccounting
# .1.3.6.1.2.1.75.1.4.1.1	fcFxPortC1AccountingTable
# .1.3.6.1.2.1.75.1.4.2.1	fcFxPortC2AccountingTable
# .1.3.6.1.2.1.75.1.4.3.1	fcFxPortC3AccountingTable

factory_settings["fc_port_default_levels"] = {
    "allowed_states" : [ "1", "2", "3" ],
}

fc_port_opermode = [ '', "unknown", "fPort", "flPort" ]
fc_port_adminstatus = [ '', "online", "offline", "testing" ]
fc_port_operstatus = [ '', "online", "offline", "testing", "linkFailure" ]

def fc_hex2string(hexcode):
	return '.'.join(str(x) for x in (ord(byte) for byte in hexcode))

def inventory_fc_port(checkname, info):
  return [(fc_hex2string(line[0]),{"hex_id": line[0]}) for line in info
    if line[1] in [ "1", "2", "3" ]]

def check_fc_port(item, params, info):
  portinfo = (line[::-1] for line in info if line[0] == params["hex_id"])
  c3discards, c3outoctets, c3inoctets, olsouts, olsins, linkresetouts, linkresetins, \
    addressiderrors, invalidcrcs, invalidtxwords, primseqprotoerrors, synclosses, \
    linkfailures, operstatus, adminstatus, opermode = map(int, portinfo.next()[:-1])

  # Performance counters
  this_time = time.time()
  rates = []
  wrapped = False
  perfdata = []
  for desc, counter in [
    ( "C3InOctets", c3inoctets ),
    ( "C3OutOctets", c3outoctets ),
    ( "C3Discards", c3discards ),
    ( "LinkFailures", linkfailures ),
    ( "SyncLosses", synclosses ),
    ( "PrimSeqProtoErrors", primseqprotoerrors ),
    ( "InvalidTxWords", invalidtxwords ),
    ( "InvalidCrcs", invalidcrcs ),
    ( "AddressIdErrors", addressiderrors ),
    ( "LinkResetIns", linkresetins ),
    ( "LinkResetOuts", linkresetouts ),
    ( "OlsIns", olsins ),
    ( "OlsOuts", olsouts ),]:
    try:
      timedif, rate = get_counter("fc.%s.%s" % (desc, item), this_time, counter)
      rates.append(rate)
      perfdata.append( (desc, rate) )
    except MKCounterWrapped:
      wrapped = True

  # continue, other counters might wrap as well
  # after all counters are handled
  if wrapped: raise MKCounterWrapped("Counter wrap")

  msg_text = "AdminStatus: %s, OperStatus: %s, OperMode: %s" % \
    (fc_port_operstatus[operstatus],fc_port_adminstatus[adminstatus],fc_port_opermode[opermode])
  if operstatus == 4:
    return (2, "CRITICAL - %s" % msg_text, perfdata)
  else:
    return (0, "OK - Operating as expected %s" % msg_text, perfdata)

  return (3, "UNKNOWN - Port info not found")

check_info["fc_port"] = {
    "inventory_function"       : inventory_fc_port,
    "check_function"           : check_fc_port,
    "has_perfdata"             : True,
    "service_description"      : "FC Port %s",
    "default_levels_variable"  : "fc_port_default_levels",
}

snmp_info["fc_port"] = \
	( ".1.3.6.1.2.1.75.1", [
		"2.1.1.1",	# fcFxPortID					Hex-STRING
		"2.1.1.3",	# fcFxPortOperMode				unknown(1), fPort(2), flPort(3)
		"2.2.1.1",	# fcFxPortPhysAdminStatus		online(1), offline(2), testing(3)
		"2.2.1.2",	# fcFxPortPhysOperStatus		online(1), offline(2), testing(3), linkFailure(4)
		"3.1.1.1",	# fcFxPortLinkFailures			Gauge32
		"3.1.1.2",	# fcFxPortSyncLosses			Gauge32
		"3.1.1.4",	# fcFxPortPrimSeqProtoErrors	Gauge32
		"3.1.1.5",	# fcFxPortInvalidTxWords		Gauge32
		"3.1.1.6",	# fcFxPortInvalidCrcs			Gauge32
		"3.1.1.8",	# fcFxPortAddressIdErrors		Gauge32
		"3.1.1.9",	# fcFxPortLinkResetIns			Gauge32
		"3.1.1.10",	# fcFxPortLinkResetOuts			Gauge32
		"3.1.1.11",	# fcFxPortOlsIns				Gauge32
		"3.1.1.12",	# fcFxPortOlsOuts				Gauge32
		"4.3.1.3",	# fcFxPortC3InOctets			Gauge32
		"4.3.1.4",	# fcFxPortC3OutOctets			Gauge32
		"4.3.1.5",	# fcFxPortC3Discards			Gauge32
	] )

snmp_scan_functions['fc_port'] = \
    lambda oid: oid(".1.3.6.1.2.1.75.1.1.1.0") != None
