#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>
# --------------------------------------------------------------------------------
# 1. Fibre Channel Module Entry info
# Polls the .1.3.6.1.4.1.122.8501 oid, FIBRE-CHANNEL-FE-MIB::fcFeModuleTable
# "A table that contains, one entry for each module in the Fabric Element, information of the modules."
# Reads:
#  .1.3.6.1.4.1.122.8501.3.101.4.1.0, location, String
#  .1.3.6.1.4.1.122.8501.3.101.1.1.0, model number, String
#  .1.3.6.1.4.1.122.8501.3.101.6.1.1.5.1, lamp hours, Counter32

factory_settings["sony_vpl_lamp_default_levels"] = {
    "crit" : 2000,
}

def inventory_sony_vpl_lamp(checkname, info):
  inventory = []
  for index, model, descr, maxhours, hours in info:
    inventory.append( (index, {}) )
  return inventory

def check_sony_vpl_lamp(item, params, info):
  for index, model, descr, maxhours, hours in info:
    if index != item: continue
    this_time = time.time()
    lamp_time = saveint(hours)
#    timedif, rate = get_counter("sony_vpl_lamp_hours.%s" % item, this_time, lamp_time)
    perfdata = [ ( "lamp_hours", lamp_time, "", saveint(maxhours) ) ]
    msg_txt = "%d on bulb %s" % (lamp_time, model)
    if lamp_time > saveint(maxhours):
      return (2, "CRITICAL - %s" % msg_txt, perfdata)
    else:
      return (0, "OK - %s" % msg_txt, perfdata)
  return (3, "UNKNOWN - %s info not found" % item)

check_info["sony_vpl_lamp"] = {
    "inventory_function"       : inventory_sony_vpl_lamp,
    "check_function"           : check_sony_vpl_lamp,
    "has_perfdata"             : True,
    "service_description"      : "Lamp %s",
    "default_levels_variable"  : "sony_vpl_lamp_default_levels",
}

snmp_info["sony_vpl_lamp"] = ( ".1.3.6.1.4.1.122.8501.3.101.6.1.1", [ \
  "1", # index
  "2", # bulb model
  "3", # other string
  "4", # max hours
  "5", # lamp hours
] )

snmp_scan_functions['sony_vpl_lamp'] = \
  lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.122.8501")
