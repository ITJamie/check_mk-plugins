#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>
# --------------------------------------------------------------------------------
# 1. Promise VTrack chassis status

def inventory_vtrack_chassis(checkname, info):
   inventory = []
   for role, status, readiness, present, offline, pfa, rebuilding, missing, unconfigured, hours, cachedirty, cacheused in info:
     if readiness == "Active":
       inventory.append( (role, None) )
   return inventory

def check_vtrack_chassis(item, _no_params, info):
  crit = 'NO'
  warn = 'NO'
  str_list = []
  for role, status, readiness, present, offline, pfa, rebuilding, missing, unconfigured, hours, cachedirty, cacheused in info:
    if role == item:
      str_list.append(status)
      str_list.append(readiness)
      if offline != '0':
        crit = 'YES'
        str_list.append(offline + "/" + present + " offline")

      if pfa != '0':
        crit = 'YES'
        str_list.append(pfa + "/" + present + " Predictive Failure Analysis (PFA)")

      if rebuilding != '0':
        warn = 'YES'
        str_list.append(rebuilding + "/" + present + " rebuilding")

      if missing != '0':
        crit = 'YES'
        str_list.append(missing + "/" + present + " missing")

      if unconfigured != '0':
        warn = 'YES'
        str_list.append(unconfigured + "/" + present + " unconfigured")

      out_str = ', '.join(str_list)
      perfdata = [ ( "PowerOnHours", hours),("DirtyCachePercentage",cachedirty,"","",0,100),("CacheUsagePercentage",cacheused,"","",0,100) ]
      if crit != 'NO':
        return (2, "CRITICAL - " + out_str,perfdata)
      elif warn != 'NO':
        return (1, "WARN - " + out_str,perfdata)
      elif status == "OK" and readiness == "Active":
        return (0, "OK - looks good - " + out_str,perfdata)

  return (3, "UNKNOWN - info not found")

check_info["vtrack_chassis"] = \
      (check_vtrack_chassis, "Array %s", 1, inventory_vtrack_chassis)

snmp_info["vtrack_chassis"] = \
	( ".1.3.6.1.4.1.7933.1.20.1.3.1", [
		"1",	# raidv4CtrlIndex
		"3",	# raidv4CtrlWWN
		"6",	# raidv4CtrlPartNumber
		"7",	# raidv4CtrlSerialNumber
		"8",	# raidv4CtrlRevision
		"10",	# raidv4CtrlSCSIProtocol	Values: unknown(0), other(1), scsi-2(2), scsi-3(3)
		"12",	# raidv4CtrlBootLoaderRev
		"13",	# raidv4CtrlFirmwareRev
		"14",	# raidv4CtrlSoftwareRev
		"15",	# raidv4CtrlOpStatus
		"16",	# raidv4CtrlRole			Values: na(-1), primary(1), secondary(0)
		"17",	# raidv4CtrlReadinessStatus
		"18",	# raidv4CtrlNumOfArrayPresent
		"19",	# raidv4CtrlNumOfPhyDrvPresent
		"20",	# raidv4CtrlNumOfPhyDrvOnline
		"21",	# raidv4CtrlNumOfPhyDrvOffline
		"22",	# raidv4CtrlNumOfPhyDrvWithPFA
		"23",	# raidv4CtrlNumOfPhyDrvRebuilding
		"24",	# raidv4CtrlNumOfPhyDrvMissing
		"25",	# raidv4CtrlNumOfPhyDrvUnconfigured
		"26",	# raidv4CtrlNumOfLogDrvPresent
		"27",	# raidv4CtrlNumOfLogDrvOnline
		"28",	# raidv4CtrlNumOfLogDrvOffline
		"29",	# raidv4CtrlNumOfLogDrvCritical
		"30",	# raidv4CtrlNumOfGlobalSparePresent
		"31",	# raidv4CtrlNumOfDedicateSparePresent
		"32",	# raidv4CtrlNumOfRevertibleGlobalSparePresent
		"33",	# raidv4CtrlNumOfRevertibleGlobalSpareUsed
		"34",	# raidv4CtrlNumOfRevertibleDedicatedSparePresent
		"35",	# raidv4CtrlNumOfRevertibleDedicatedSpareUsed
		"36",	# raidv4CtrlNumOfBGAs
		"37",	# raidv4CtrlPowerOnHours
		"38",	# raidv4CtrlDirtyCachePercentage	Values: na(-1)
		"39",	# raidv4CtrlCacheUsagePercentage	Values: na(-1)
		"64",	# raidv4CtrlNumOfLogDrvDegraded
	] )
snmp_scan_functions['vtrack_chassis'] = \
  lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.7933.1.10")
