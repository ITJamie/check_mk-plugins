#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>
# --------------------------------------------------------------------------------
# 1. Promise VTrack chassis status

factory_settings["vtrack_chassis_default_levels"] = {
    "allowed_status" : ["OK"],
    "allowed_ready" : ["Active"],
}

def vtrack_chassis_scsiname(st):
    names = { '0': "unknown", '1': "other", '2': "scsi-2", '3': "scsi-3" }
    return names.get(st, st)

def vtrack_chassis_rolename(st):
    names = { '-1': "na", '1': "primary", '2': "secondary" }
    return names.get(st, st)

def inventory_vtrack_chassis(checkname, info):
   inventory = []
   for index, serial, scsi, bootloader, firmware, ops, role, readiness, arrays, pdrives, ponline, poffline, pfa, rebuilding, missing, unconfigured, ldrives, lonline, loffline, lcrit, hours, cachedirty, cacheused, ldrvdegraded in info:
     if scsi in ["2", "3"]:
       inventory.append( (index, {}) )
   return inventory

def check_vtrack_chassis(item, params, info):
  for index, serial, scsi, bootloader, firmware, ops, role, readiness, arrays, pdrives, ponline, poffline, pfa, rebuilding, missing, unconfigured, ldrives, lonline, loffline, crit, hours, cachedirty, cacheused, ldrvdegraded in info:
    crit = False
    warn = False
    str_list = []
    if index == item:
      str_list.append("%s and %s" % (ops, readiness))
      if poffline != '0':
        crit = True
        str_list.append("%s/%s offline" % (poffline, pdrives))

      if pfa != '0':
        crit = True
        str_list.append("%s/%s Predictive Failure Analysis (PFA)" % (pfa, pdrives))

      if rebuilding != '0':
        warn = True
        str_list.append("%s/%s rebuilding" % (rebuilding, pdrives))

      if missing != '0':
        crit = True
        str_list.append("%s/%s missing" % (missing, pdrives))

      if unconfigured != '0':
        warn = True
        str_list.append("%s/%s unconfigured" % (unconfigured, pdrives))

      out_str = ' '.join(str_list)
      perfdata = [ ( "PowerOnHours", hours),("DirtyCachePercentage",cachedirty,"","",0,100),("CacheUsagePercentage",cacheused,"","",0,100) ]
      if crit:
        return (2, "CRITICAL - %s" % out_str, perfdata)
      elif warn:
        return (1, "WARN - %s" % out_str, perfdata)
#      elif ops == "OK" and readiness == "Active":
      else:
        return (0, "OK - %s" % out_str, perfdata)

  return (3, "UNKNOWN - info not found")

check_info["vtrack_chassis"] = {
    "inventory_function"       : inventory_vtrack_chassis,
    "check_function"           : check_vtrack_chassis,
    "has_perfdata"             : True,
    "service_description"      : "Array %s",
    "default_levels_variable"  : "vtrack_chassis_default_levels",
}

snmp_info["vtrack_chassis"] = \
	( ".1.3.6.1.4.1.7933.1.20.1.3.1", [
		"1",	# raidv4CtrlIndex
		"7",	# raidv4CtrlSerialNumber
		"10",	# raidv4CtrlSCSIProtocol	Values: unknown(0), other(1), scsi-2(2), scsi-3(3)
		"12",	# raidv4CtrlBootLoaderRev
		"13",	# raidv4CtrlFirmwareRev
		"15",	# raidv4CtrlOpStatus
		"16",	# raidv4CtrlRole			Values: na(-1), primary(1), secondary(0)
		"17",	# raidv4CtrlReadinessStatus
		"18",	# raidv4CtrlNumOfArrayPresent
		"19",	# raidv4CtrlNumOfPhyDrvPresent
		"20",	# raidv4CtrlNumOfPhyDrvOnline
		"21",	# raidv4CtrlNumOfPhyDrvOffline
		"22",	# raidv4CtrlNumOfPhyDrvWithPFA
		"23",	# raidv4CtrlNumOfPhyDrvRebuilding
		"24",	# raidv4CtrlNumOfPhyDrvMissing
		"25",	# raidv4CtrlNumOfPhyDrvUnconfigured
		"26",	# raidv4CtrlNumOfLogDrvPresent
		"27",	# raidv4CtrlNumOfLogDrvOnline
		"28",	# raidv4CtrlNumOfLogDrvOffline
		"29",	# raidv4CtrlNumOfLogDrvCritical
		"37",	# raidv4CtrlPowerOnHours
		"38",	# raidv4CtrlDirtyCachePercentage	Values: na(-1)
		"39",	# raidv4CtrlCacheUsagePercentage	Values: na(-1)
		"64",	# raidv4CtrlNumOfLogDrvDegraded
	] )

snmp_scan_functions['vtrack_chassis'] = \
    lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.7933.1.10")
