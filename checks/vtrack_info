#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>
# --------------------------------------------------------------------------------
# 1. Promise VTrack base info

def vtrack_info_typename(st):
    names = { '0': "hba", '1': "subsys" }
    return names.get(st, st)
def vtrack_info_rstatusname(st):
    names = { '0': "not-redundant", '1': "redundant", '2': "critical", '3': "not-supported" }
    return names.get(st, st)
def vtrack_info_connectiontypename(st):
    names = { '0': "not-supported", '1': "sas" }
    return names.get(st, st)
def vtrack_info_interfacetypename(st):
    names = { '0': "unknown", '1': "pci", '2': "iscsi", '3': "fc", '4': "scsi", '5': "sas" }
    return names.get(st, st)
def vtrack_info_rtypename(st):
    names = { '0': "na", '1': "active-active", '2': "active-standby", '3': "not-supported" }
    return names.get(st, st)
def vtrack_info_mirroringname(st):
    names = { '0': "na", '1': "true", '2': "not-supported", '3': "false" }
    return names.get(st, st)

def inventory_vtrack_info(checkname, info):
  inventory = []
  for index, type, descrip, id, time, rstatus, controllers, connection, enclosures, interface, rtype, mirroring in info:
    if 'VTrak' in descrip and controllers >= "1":
      inventory.append( (descrip, None) )
  return inventory

def check_vtrack_info(item, _no_params, info):
  for index, type, descrip, id, time, rstatus, controllers, connection, enclosures, interface, rtype, mirroring in info:
    if descrip == item:
      if redundant == "1":
        return (0, "OK - Controller is redundant")
    else:
      return (2, "CRITICAL - Controller is " + redundant)
  return (3, "UNKNOWN - Controller not found")

check_info["vtrack_info"] = \
      (check_vtrack_info, "%s", 0, inventory_vtrack_info)

snmp_info["vtrack_info"] = \
	( ".1.3.6.1.4.1.7933.1.20.1.1.1", [
		"1",	# raidv4InstanceIndex
		"2",	# raidv4InstanceType				Values: hba(0), subsys(1)
		"3",	# raidv4InstanceDescription
		"4",	# raidv4InstanceIdentification
		"5",	# raidv4InstanceTime
		"6",	# raidv4InstanceRedundancyStatus	Values: not-redundant(0), redundant(1), critical(2), not-supported(255)
		"7",	# raidv4InstanceNumOfControllersPresent
		"8",	# raidv4InstanceInterConnectionType	Values: not-supported(0), sas(1)
		"9",	# raidv4InstanceNumOfEnclosuresPresent
		"10",	# raidv4InstanceHostInterfaceType	Values: unknown(0), pci(1), iscsi(2), fc(3), scsi(4), sas(5)
		"11",	# raidv4InstanceRedundancyType		Values: na(0), active-active(1), active-standby(2), not-supported(255)
		"12",	# raidv4InstanceCacheMirroringEnabled	Values: na(0), true(1), not-supported(2), false(3)
	] )
snmp_scan_functions['vtrack_info'] = \
  lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.7933.1.10")
