#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>

factory_settings["xsan_default_levels"] = {
    "allowed_fsm_states" : ["REGISTERED"],
    "free_percent_crit"  : 20,
    "free_percent_warn"  : 30,
}

def inventory_xsan_fsm(checkname, info):
    inventory = []
    for line in info:
        if line[0] == "fsm":
            vol = line[1]
            inventory.append((vol, {}))
    return inventory

def check_xsan_fsm(item, params, info):
    for line in info:
        if line[0] == "fsm" and line[1] == item:
            pid = line[3]
            port = line[4]
            state = line[5]
            launchcount = int(line[8])
            coredumps = int(line[9])
            master = line[11]

            msg_txt = "pid: %s port: %s launch count: %s core dumps: %s" % (pid, port, launchcount, coredumps)
            perfdata = [ ( "launch_count", launchcount ), ( "core_dumps", coredumps ) ]
            if state in params["allowed_fsm_states"]:
                return (0, "OK - %s - %s" % (state, msg_txt), perfdata)
            else:
                return (2, "CRITICAL - %s - %s" % (state, msg_txt), perfdata)
    return (3, "UNKNOWN - Vol %s not found in agent output" % item)

check_info['xsan.fsm'] = {
    "inventory_function"      : inventory_xsan_fsm,
    "check_function"          : check_xsan_fsm,
    "has_perfdata"            : True,
    "service_description"     : "XSAN Vol %s",
    "default_levels_variable" : "xsan_default_levels",
}

## XSAN Status

def inventory_xsan_stats(checkname, info):
    inventory = []
    for line in info:
        if line[0] == "stats":
            vol = line[1]
            inventory.append((vol, {}))

    return inventory

def check_xsan_stats(item, params, info):
    for line in info:
        if line[0] == "stats" and line[1] == item:
            blocksize = line[7]
            msg_buffer = line[8]
            disks = line[9]
            stripe_groups = line[10]
            blocks = line[11]
            blocks_nice = line[12]
            blocks_units = line[13]
            blocks_free = int(line[14])
            blocks_free_nice = line[15]
            blocks_free_unit = line[16]
            blocks_free_percent = int(line[17])

            msg_txt = "%s stripe groups on %s disks %s/%s blocks used (%s%s/%s%s), block size: %s each message buffer: %s" % (stripe_groups, disks, blocks_free, blocks, blocks_free_nice, blocks_free_unit, blocks_nice, blocks_units, blocksize, msg_buffer, )
            perfdata = [ ("percent_blocks_free", blocks_free_percent, params["free_percent_warn"], params["free_percent_crit"], 0, 100), ("blocks_free", blocks_free) ]
            if blocks_free_percent < params["free_percent_crit"]:
                return (2, "CRITICAL - %d%% free - %s" % (blocks_free_percent, msg_txt), perfdata)
            elif blocks_free_percent < params["free_percent_warn"]:
                return (1, "WARNING - %d%% free - %s" % (blocks_free_percent, msg_txt), perfdata)
            else:
                return (0, "OK - %d%% free - %s" % (blocks_free_percent, msg_txt), perfdata)

    return (3, "UNKNOWN - Vol %s not found in agent output" % item)

check_info['xsan.stats'] = {
    "inventory_function"      : inventory_xsan_stats,
    "check_function"          : check_xsan_stats,
    "has_perfdata"            : True,
    "service_description"     : "XSAN Stats %s",
    "default_levels_variable" : "xsan_default_levels",
}

## XSAN Stripe Groups

def inventory_xsan_stripe(checkname, info):
    inventory = []
    for line in info:
        if line[0] == "stripe":
            vol = line[1]
            index = line[2]
            name = "%s.%s" % (vol, index)
            inventory.append((name, {"status": line[4]}))

    return inventory

def check_xsan_stripe(item, params, info):
    for line in info:
        if line[0] == "stripe":
            vol = line[1]
            index = line[2]
            name = "%s.%s" % (vol, index)
            if name == item:
                title = line[3]
                status = line[4]
                if status == params["status"]:
                    return (0, "OK - %s is %s" % (title,status))
                else:
                    return (2, "CRITICAL - %s is %s" % (title,status))

    return (3, "UNKNOWN - %s not found in agent output" % item)

check_info['xsan.stripe'] = {
    "inventory_function"      : inventory_xsan_stripe,
    "check_function"          : check_xsan_stripe,
    "has_perfdata"            : False,
    "service_description"     : "XSAN Stripe Group %s",
    "default_levels_variable" : "xsan_default_levels",
}

## XSAN Paths

def inventory_xsan_paths(checkname, info):
    inventory = []
    for line in info:
        if line[0] == "paths" and len(line) == 8:
            inventory.append((line[1], {"disk": line[2], "state": line[6]}))

    return inventory

def check_xsan_paths(item, params, info):
    for line in info:
        if line[0] == "paths" and line[1] == item:
            chk, vol, dev, hba, ctl, lun, state, controller = line
            if state != params["state"]:
                return (2, "CRITICAL - state: %s changed from %s - device: %s hba: %s ctl: %s lun: %s" % (state, params["state"], dev, hba, ctl, lun))
            elif dev != params["disk"]:
                return (1, "WARN - device: %s changed from %s - state: %s hba: %s ctl: %s lun: %s" % (dev, params["disk"], state, hba, ctl, lun))
            else:
                return (0, "OK - state: %s device: %s hba: %s ctl: %s lun: %s" % (state, dev, hba, ctl, lun))

    return (3, "UNKNOWN - Path %s not found in agent output" % item)

check_info['xsan.paths'] = {
    "inventory_function"      : inventory_xsan_paths,
    "check_function"          : check_xsan_paths,
    "has_perfdata"            : False,
    "service_description"     : "XSAN Path %s",
    "default_levels_variable" : "xsan_default_levels",
}

## XSAN Disks

def inventory_xsan_disks(checkname, info):
    inventory = []
    for line in info:
        if line[0] == "disks" and len(line) == 5:
            inventory.append((line[1],{"device": line[2],"sectors": line[3],"sect_size": line[4]}))

    return inventory

def check_xsan_disks(item, params, info):
    for line in info:
        if line[0] == "disks" and line[1] == item:
            chk, vol, device, sectors, sect_size = line
            if device != params["device"]:
                return (1, "WARN - %s changed from %s" % (device, params["device"]))
            elif (sectors, sect_size) != (params["sectors"], params["sect_size"]):
                return (1, "WARN - %s sectors / %s sector size changed from  %s sectors / %s sector size" % (sectors, sect_size, params["sectors"], params["sect_size"]))
            else:
                return (0, "OK - device:%s sectors: %s sector size: %s" % (device, sectors, sect_size))

    return (3, "UNKNOWN - Disk %s not found in agent output" % item)

check_info['xsan.disks'] = {
    "inventory_function"      : inventory_xsan_disks,
    "check_function"          : check_xsan_disks,
    "has_perfdata"            : False,
    "service_description"     : "XSAN Disk %s",
    "default_levels_variable" : "xsan_default_levels",
}
