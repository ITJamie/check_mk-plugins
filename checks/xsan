#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>

def inventory_xsan_fsm(checkname, info):
  inventory = []
  for line in info:
    vol = line[1]
    field = line[0]
    if field == "fsm":
      inventory.append( (vol, "", None) )
  return inventory

def check_xsan_fsm(item, params, info):
  for line in info:
    if line[1] == item and line[0] == "fsm":
      pid = int(line[3])
      port = int(line[4])
      state = line[5]
      launchcounts = int(line[8])
      coredumps = int(line[9])
      master = line[11]

  perfdata = [ ( "launch_count", launchcounts ), ( "core_dumps", coredumps ) ]
  if state != "REGISTERED":
    return (2, "CRITICAL - %s" % state, perfdata)
  else:
    return (0, "OK - %s" % state, perfdata)
  return (3, "UNKNOWN - Vol %s not found in agent output" % item)

check_info['xsan.fsm'] = \
  (check_xsan_fsm, "XSAN Vol %s", 1, inventory_xsan_fsm)

def inventory_xsan_stats(checkname, info):
  inventory = []
  for line in info:
    vol = line[1]
    field = line[0]
    if field == "stats":
      inventory.append( (vol, "", None) )
  return inventory

def check_xsan_stats(item, params, info):
  for line in info:
    if line[1] == item and line[0] == "stats":
      blocksize = line[7]
      msg_buffer = line[8]
      disks = int(line[9])
      stripe_groups = int(line[10])
      blocks = int(line[11])
      blocks_nice = float(line[12])
      blocks_units = line[13]
      blocks_free = int(line[14])
      blocks_free_nice = float(line[15])
      blocks_free_unit = line[16]
      blocks_free_percent = int(line[17])

  perfdata = [ ( "percent_blocks_free", blocks_free_percent ), ( "blocks_free", blocks_free ) ]
  if blocks_free_percent < 20:
    return (2, "CRITICAL - %d%%" % blocks_free_percent, perfdata)
  elif blocks_free_percent < 25:
    return (1, "WARNING - %d%%" % blocks_free_percent, perfdata)
  else:
    return (0, "OK - %d%%" % blocks_free_percent, perfdata)
  return (3, "UNKNOWN - Vol %s not found in agent output" % item)

check_info['xsan.stats'] = \
  (check_xsan_stats, "XSAN Stats %s", 1, inventory_xsan_stats)
