#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>
# --------------------------------------------------------------------------------
# 1. Fibre Channel physical info
# Polls the .1.3.6.1.2.1.75.1.2.2.1 oid, FIBRE-CHANNEL-FE-MIB::fcFxPortPhysTable
# "A table that contains, one entry for each FxPort in the Fabric Element, physical level status and parameters of the FxPorts."
# .1.3.6.1.2.1.75.1.1.5.1 fcFxPortTable
# .1.3.6.1.2.1.75.1.2.1.1 fcFxPortStatusTable
# .1.3.6.1.2.1.75.1.2.2.1 fcFxPortPhysTable
# .1.3.6.1.2.1.75.1.2.3.1	fcFxLoginTable
# fcFeError
# .1.3.6.1.2.1.75.1.3.1.1	fcFxPortErrorTable
# fcFeAccounting
# .1.3.6.1.2.1.75.1.4.1.1	fcFxPortC1AccountingTable
# .1.3.6.1.2.1.75.1.4.2.1	fcFxPortC2AccountingTable
# .1.3.6.1.2.1.75.1.4.3.1	fcFxPortC3AccountingTable
check_includes['fc'] = [ "fc.include" ]

def fc_opermode(st):
    names = {'1': "unknown", '2': "fPort", '3': "flPort" }
    return names.get(st, st)
def inventory_fc_ports(checkname, info):
  inventory = []
  for name, id, opermode, physadminstatus, physoperstatus, physrttov,\
    linkfailures, synclosses, primseqprotoerrors, invalidtxwords,\
    invalidcrcs, addressiderrors, linkresetins, linkresetouts, olsins,\
    olsouts, c3inframes, c3outframes, c3inoctets, c3outoctets, c3discards in info:
    portname = fc_hex2string(name)
    portid = fc_hex2string(id)
    if opermode in ["1","2","3",]:
      inventory.append( (fc_hex2string(id), {"opermode" : opermode,\
      "adminstatus" : physadminstatus,"operstatus": physoperstatus, "rxtimeout": physrttov}) )
  return inventory

def check_fc_ports(item, _no_params, info):
  for name, id, opermode, physadminstatus, physoperstatus, physrttov,\
    linkfailures, synclosses, primseqprotoerrors, invalidtxwords,\
    invalidcrcs, addressiderrors, linkresetins, linkresetouts, olsins,\
    olsouts, c3inframes, c3outframes, c3inoctets, c3outoctets, c3discards in info:
    portname = fc_hex2string(name)
    portid = fc_hex2string(id)
    portopermode = fc_opermode(opermode)
    portadminstatus = fc_statusname(physadminstatus)
    portoperstatus = fc_statusname(physoperstatus)
    if portid == item:
      msg_text = "%s %s - %s %s %s - %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s" % \
        (portname, portopermode, portadminstatus, portoperstatus, physrttov,\
        linkfailures, synclosses, primseqprotoerrors, invalidtxwords, \
        invalidcrcs, addressiderrors, linkresetins, linkresetouts, olsins, \
        olsouts, c3inframes, c3outframes, c3inoctets, c3outoctets, c3discards,)
      if physadminstatus == "1" and physoperstatus == "1":
        return (0, "OK - %s" % msg_text)
      else:
        return (2, "CRITICAL - %s" % msg_text)
  return (3, "UNKNOWN - Port info not found")

check_info["fc_ports"] = \
      (check_fc_ports, "FC Port %s", 0, inventory_fc_ports)

snmp_info["fc_ports"] = \
	( ".1.3.6.1.2.1.75.1", [
		"1.5.1.2",	# fcFxPortName					Hex-STRING
		"2.1.1.1",	# fcFxPortID					Hex-STRING
		"2.1.1.3",	# fcFxPortOperMode				Values: unknown(1), fPort(2), flPort(3)
		"2.2.1.1",	# fcFxPortPhysAdminStatus		Values: online(1), offline(2), testing(3)
		"2.2.1.2",	# fcFxPortPhysOperStatus		Values: online(1), offline(2),\
					#								testing(3), linkFailure(4)
		"2.2.1.4",	# fcFxPortPhysRttov				Gauge32
		"3.1.1.1",	# fcFxPortLinkFailures			Gauge32
		"3.1.1.2",	# fcFxPortSyncLosses			Gauge32
		"3.1.1.4",	# fcFxPortPrimSeqProtoErrors	Gauge32
		"3.1.1.5",	# fcFxPortInvalidTxWords		Gauge32
		"3.1.1.6",	# fcFxPortInvalidCrcs			Gauge32
		"3.1.1.8",	# fcFxPortAddressIdErrors		Gauge32
		"3.1.1.9",	# fcFxPortLinkResetIns			Gauge32
		"3.1.1.10",	# fcFxPortLinkResetOuts			Gauge32
		"3.1.1.11",	# fcFxPortOlsIns				Gauge32
		"3.1.1.12",	# fcFxPortOlsOuts				Gauge32
		"4.3.1.1",	# fcFxPortC3InFrames			Gauge32
		"4.3.1.2",	# fcFxPortC3OutFrames			Gauge32
		"4.3.1.3",	# fcFxPortC3InOctets			Gauge32
		"4.3.1.4",	# fcFxPortC3OutOctets			Gauge32
		"4.3.1.5",	# fcFxPortC3Discards			Gauge32
	] )

snmp_scan_functions['fc_ports'] = \
  lambda oid: oid(".1.3.6.1.2.1.75.1.1.1.0") != None
