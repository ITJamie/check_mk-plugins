#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# --------------------------------------------------------------------------------
# 1. Fibre Channel physical info
# Polls the .1.3.6.1.2.1.75.1.2.2.1 oid, FIBRE-CHANNEL-FE-MIB::fcFxPortPhysTable
# "A table that contains, one entry for each FxPort in the Fabric Element, physical level status and parameters of the FxPorts."
# .1.3.6.1.2.1.75.1.1.5.1 fcFxPortTable
# .1.3.6.1.2.1.75.1.2.1.1 fcFxPortStatusTable
# .1.3.6.1.2.1.75.1.2.2.1 fcFxPortPhysTable
# .1.3.6.1.2.1.75.1.2.3.1	fcFxLoginTable
# fcFeError
# .1.3.6.1.2.1.75.1.3.1.1	fcFxPortErrorTable
# fcFeAccounting
# .1.3.6.1.2.1.75.1.4.1.1	fcFxPortC1AccountingTable
# .1.3.6.1.2.1.75.1.4.2.1	fcFxPortC2AccountingTable
# .1.3.6.1.2.1.75.1.4.3.1	fcFxPortC3AccountingTable
check_includes['fc'] = [ "fc.include" ]

def inventory_fc_ports(checkname, info):
  inventory = []
  for name, id, opermode, physadminstatus, physoperstatus, physrttov, cossuppagreed, \
    nxportname, linkfailures, synclosses, siglosses, primseqprotoerrors, invalidtxwords, \
    invalidcrcs, delimitererrors, addressiderrors, linkresetins, linkresetouts, olsins, \
    olsouts, c3inframes, c3outframes, c3inoctets, c3outoctets, c3discards in info:

    inventory.append( (fc_hex2string(name), None) )
  return inventory

def check_fc_ports(item, _no_params, info):
  for name, id, opermode, physadminstatus, physoperstatus, physrttov, cossuppagreed, \
    nxportname, linkfailures, synclosses, siglosses, primseqprotoerrors, invalidtxwords, \
    invalidcrcs, delimitererrors, addressiderrors, linkresetins, linkresetouts, olsins, \
    olsouts, c3inframes, c3outframes, c3inoctets, c3outoctets, c3discards in info:
    if fc_hex2string(name) == item:
      if physadminstatus == "1" and physoperstatus == "1":
        return (0, "OK - ")
      else:
        return (2, "CRITICAL - ")
  return (3, "UNKNOWN - Port info not found")

check_info["fc_ports"] = \
      (check_fc_ports, "Port %s", 0, inventory_fc_ports)

snmp_info["fc_ports"] = \
	( ".1.3.6.1.2.1.75.1", [
		"1.5.1.2",	# fcFxPortName
		"2.1.1.1",	# fcFxPortID
		"2.1.1.3",	# fcFxPortOperMode			Values: unknown(1), fPort(2), flPort(3)
		"2.2.1.1",	# fcFxPortPhysAdminStatus	Values: online(1), offline(2), testing(3)
		"2.2.1.2",	# fcFxPortPhysOperStatus	Values: online(1), offline(2), testing(3), linkFailure(4)
		"2.2.1.4",	# fcFxPortPhysRttov
		"2.3.1.5",	# fcFxPortCosSuppAgreed		Values: classF(0), class1(1), class2(2), class3(3), class4(4), class5(5), class6(6)
		"2.3.1.10",	# fcFxPortNxPortName
		"3.1.1.1",	# fcFxPortLinkFailures
		"3.1.1.2",	# fcFxPortSyncLosses
		"3.1.1.3",	# fcFxPortSigLosses
		"3.1.1.4",	# fcFxPortPrimSeqProtoErrors
		"3.1.1.5",	# fcFxPortInvalidTxWords
		"3.1.1.6",	# fcFxPortInvalidCrcs
		"3.1.1.7",	# fcFxPortDelimiterErrors
		"3.1.1.8",	# fcFxPortAddressIdErrors
		"3.1.1.9",	# fcFxPortLinkResetIns
		"3.1.1.10",	# fcFxPortLinkResetOuts
		"3.1.1.11",	# fcFxPortOlsIns
		"3.1.1.12",	# fcFxPortOlsOuts
		"4.3.1.1",	# fcFxPortC3InFrames
		"4.3.1.2",	# fcFxPortC3OutFrames
		"4.3.1.3",	# fcFxPortC3InOctets
		"4.3.1.4",	# fcFxPortC3OutOctets
		"4.3.1.5",	# fcFxPortC3Discards
	] )

snmp_scan_functions['fc_ports'] = \
  lambda oid: oid(".1.3.6.1.2.1.75.1.1.1.0") != None
