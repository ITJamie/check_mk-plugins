#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# --------------------------------------------------------------------------------
# 1. Fibre Channel physical info
# Polls the .1.3.6.1.2.1.75.1.2.2.1 oid, FIBRE-CHANNEL-FE-MIB::fcFxPortPhysTable
# "A table that contains, one entry for each FxPort in the Fabric Element, physical level status and parameters of the FxPorts."
# .1.3.6.1.2.1.75.1.1.5.1 fcFxPortTable
# .1.3.6.1.2.1.75.1.2.1.1 fcFxPortStatusTable
# .1.3.6.1.2.1.75.1.2.2.1 fcFxPortPhysTable
# .1.3.6.1.2.1.75.1.2.3.1	fcFxLoginTable
# fcFeError
# .1.3.6.1.2.1.75.1.3.1.1	fcFxPortErrorTable
# fcFeAccounting
# .1.3.6.1.2.1.75.1.4.1.1	fcFxPortC1AccountingTable
# .1.3.6.1.2.1.75.1.4.2.1	fcFxPortC2AccountingTable
# .1.3.6.1.2.1.75.1.4.3.1	fcFxPortC3AccountingTable
check_includes['fc'] = [ "fc.include" ]

def inventory_fc_ports(checkname, info):
  inventory = []
  count = 1
  for adminstatus, operstatus, lastchange, rttov in info:
    inventory.append( (count, None) )
    count += 1
  return inventory

def check_fc_ports(item, _no_params, info):
  for adminstatus, operstatus, lastchange, rttov in info:
    if index == item:
      if status == "3" or status == "9":
        return (0, "OK - " + speed + "mps")
      else:
        return (2, "CRITICAL - " + speed + "mps")
  return (3, "UNKNOWN - Port info not found")

check_info["fc_ports"] = \
      (check_fc_ports, "Port %s", 0, inventory_fc_ports)

snmp_info["fc_ports"] = \
	( ".1.3.6.1.2.1.75.1.2.2.1", [
		"1",	# fcFxPortPhysAdminStatus	Values: online(1), offline(2), testing(3)
		"2",	# fcFxPortPhysOperStatus	Values: online(1), offline(2), testing(3), linkFailure(4)
		"3",	# fcFxPortPhysLastChange
		"4",	# fcFxPortPhysRttov
	] )

snmp_scan_functions['fc_ports'] = \
  lambda oid: oid(".1.3.6.1.2.1.75.1.1.1.0") != None
