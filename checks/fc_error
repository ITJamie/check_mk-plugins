#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# --------------------------------------------------------------------------------
# 1. Fibre Channel Module Entry info
# Polls the .1.3.6.1.2.1.75.1.3 oid, FIBRE-CHANNEL-FE-MIB::fcFxPortErrorTable
# "A table that contains, one entry for each FxPort, counters that record the numbers of errors detected."
check_includes['fc'] = [ "fc.include" ]

def inventory_fc_error(checkname, info):
  inventory = []
  count = 1
  for linkfailures, synclosses, siglosses, primseqprotoerrors, invalidtxwords, \
  invalidcrcs, delimitererrors, addressiderrors, linkresetins, linkresetouts, \
  olsins, olsouts in info:
    inventory.append( (count, None) )
    count += 1
  return inventory

def check_fc_error(item, _no_params, info):
  for linkfailures, synclosses, siglosses, primseqprotoerrors, invalidtxwords, \
  invalidcrcs, delimitererrors, addressiderrors, linkresetins, linkresetouts, \
  olsins, olsouts in info:
    if index == item:
      if status == "3" or status == "9":
        return (0, "OK - " + speed + "mps")
      else:
        return (2, "CRITICAL - " + speed + "mps")
  return (3, "UNKNOWN - Port info not found")

check_info["fc_error"] = \
      (check_fc_error, "Port %s", 0, inventory_fc_error)

snmp_info["fc_error"] = \
	( ".1.3.6.1.2.1.75.1", [
		"3.1.1.1",	# fcFxPortLinkFailures
		"3.1.1.2",	# fcFxPortSyncLosses
		"3.1.1.3",	# fcFxPortSigLosses
		"3.1.1.4",	# fcFxPortPrimSeqProtoErrors
		"3.1.1.5",	# fcFxPortInvalidTxWords
		"3.1.1.6",	# fcFxPortInvalidCrcs
		"3.1.1.7",	# fcFxPortDelimiterErrors
		"3.1.1.8",	# fcFxPortAddressIdErrors
		"3.1.1.9",	# fcFxPortLinkResetIns
		"3.1.1.10",	# fcFxPortLinkResetOuts
		"3.1.1.11",	# fcFxPortOlsIns
		"3.1.1.12",	# fcFxPortOlsOuts
	] )

snmp_scan_functions['fc_error'] = \
  lambda oid: oid(".1.3.6.1.2.1.75.1.1.1.0") != None
