# --------------------------------------------------------------------------------
# 1. Fibre Channel Module Entry info
# Polls the .1.3.6.1.2.1.75.1.1.4 oid, FIBRE-CHANNEL-FE-MIB::fcFeModuleTable
# "A table that contains, one entry for each module in the Fabric Element, information of the modules."
# Reads:
#  .1.3.6.1.2.1.75.1.1.4.1.1, FIBRE-CHANNEL-FE-MIB::fcFeModuleIndex, Textual Convention: FcFeModuleIndex
#  .1.3.6.1.2.1.75.1.1.4.1.2, FIBRE-CHANNEL-FE-MIB::fcFeModuleDescr, Textual Convention: SnmpAdminString
#  .1.3.6.1.2.1.75.1.1.4.1.3, FIBRE-CHANNEL-FE-MIB::fcFeModuleObjectID,
#  .1.3.6.1.2.1.75.1.1.4.1.4, FIBRE-CHANNEL-FE-MIB::fcFeModuleOperStatus, Values: online(1), offline(2), testing(3), faulty(4)
#  .1.3.6.1.2.1.75.1.1.4.1.5, FIBRE-CHANNEL-FE-MIB::fcFeModuleLastChange, Textual Convention: TimeStamp
#  .1.3.6.1.2.1.75.1.1.4.1.6, FIBRE-CHANNEL-FE-MIB::fcFeModuleFxPortCapacity, Textual Convention: FcFeFxPortCapacity
#  .1.3.6.1.2.1.75.1.1.4.1.7, FIBRE-CHANNEL-FE-MIB::fcFeModuleName, Textual Convention: FcNameId

def inventory_fc_entry(checkname, info):
  inventory = []
  for id, index, type, state in info:
    if state == "2" or state == "3":
      inventory.append( (index, None) )
  return inventory

def check_fc_entry(item, _no_params, info):
  for id, index, type, state in info:
    if index == item:
      if status == "3" or status == "9":
        return (0, "OK - " + speed + "mps")
      else:
        return (2, "CRITICAL - " + speed + "mps")
  return (3, "UNKNOWN - Port info not found")

check_info["fc_entry"] = \
      (check_fc_entry, "Port %s", 0, inventory_fc_entry)

snmp_info["fc_entry"] = ( ".1.3.6.1.2.1.75.1.1.4.1", [ "1", "2", "3", "4", "5", "6", "7" ] )
snmp_scan_functions['fc_entry'] = \
  lambda oid: oid(".1.3.6.1.2.1.75.1.1.1") != None