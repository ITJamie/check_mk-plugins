#!/bin/sh
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2010             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>

# NOTE: This agent has beed adapted from the Check_MK linux agent.

# This might be a good source as description of sysctl output:
# http://people.freebsd.org/~hmp/utilities/satbl/_sysctl.html

# Remove locale settings to eliminate localized outputs where possible
export LC_ALL=C
unset LANG

export MK_LIBDIR="/usr/lib/check_mk_agent"
export MK_CONFDIR="/etc/check_mk"

# Make sure, locally installed binaries are found
PATH=$PATH:/usr/local/bin

# All executables in PLUGINSDIR will simply be executed and their
# ouput appended to the output of the agent. Plugins define their own
# sections and must output headers with '<<<' and '>>>'
PLUGINSDIR=$MK_LIBDIR/plugins

# All executables in LOCALDIR will by executabled and their
# output inserted into the section <<<local>>>. Please refer
# to online documentation for details.
LOCALDIR=$MK_LIBDIR/local


# close standard input (for security reasons) and stderr
if [ "$1" = -d ]
then
    set -xv
else
    exec <&- 2>/dev/null
fi

echo '<<<check_mk>>>'
echo Version: 1.2.0p3
echo AgentOS: darwin
echo PluginsDirectory: $PLUGINSDIR
echo LocalDirectory: $LOCALDIR
echo AgentDirectory: $MK_CONFDIR

osver="$(uname -r)"

echo '<<<df>>>';
df -kPT hfs,acfs | sed -e 's/^\([^ ][^ ]*\) \(.*\)$/\1 hfs \2/' | sed 1d

# processes including username, without kernel processes
echo '<<<ps>>>'
COLUMNS=10000
ps ax -o user,vsz,rss,pcpu,command | sed -e 1d -e 's/ *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) */(\1,\2,\3,\4) /' | sed 's/^[ \t]*//;s/[ \t]*$//' | grep -v '(root,0,0,0.0)'

# Memory and CPU Usage.  This is a long awk script to get info from top with sysctl for number of procs and the shells pid.
top -l 1 -n 0 -S -F -R | awk '
function unreadable(STRING) {
ex = index("MG", substr(STRING, length(STRING)))
val = substr(STRING, 0, length(STRING))
prod = val * 10^(ex * 3)
return prod
}
/^Processes:/{
processes["total"] = $2;
processes["running"] = $4;
processes["stuck"] = $6;
processes["sleeping"] = $8;
processes["threads"] = $10
}
/^Load/{
load[1] = $3 + 0;
load[5] = $4 + 0;
load[15] = $5 + 0
}
/^CPU/{
usage["user"] = $3 + 0;
usage["sys"] = $5 + 0;
usage["idle"] = $7 + 0
}
/^PhysMem:/{
physmem["wired"] = unreadable($2);
physmem["total"] += physmem["wired"];
physmem["active"] = unreadable($4);
physmem["total"] += physmem["active"];
physmem["inactive"] = unreadable($6);
physmem["total"] += physmem["inactive"];
physmem["free"] = unreadable($10);
physmem["total"] += physmem["free"];
}
/^Swap:/{
swap["used"] = unreadable($2);
swap["total"] += swap["used"];
swap["free"] = unreadable($4);
swap["total"] += swap["free"]
}
END{
printf ("<<<cpu>>>\n");
printf ("%s %s %s %d/%d %d %d\n", load[1], load[5], load[15], processes["running"], processes["total"], pid, cpus);
printf ("<<<mem>>>\n");
printf ("MemTotal:\t%d kB\n", physmem["total"]);
printf ("MemFree:\t%d kB\n", physmem["free"]);
printf ("Active:\t\t%d kB\n", physmem["active"]);
printf ("Inactive:\t%d kB\n", physmem["inactive"]);
printf ("Mapped:\t\t%d kB\n", physmem["wired"]);
printf ("SwapTotal:\t%d kB\n", swap["total"]);
printf ("SwapFree:\t%d kB\n", swap["free"]);
}' pid=$$ cpus=`sysctl -n hw.ncpu`

# Calculate the uptime in seconds since epoch compatible to /proc/uptime in linux
echo '<<<uptime>>>'
echo `date +%s` - `sysctl -n kern.boottime | cut -d' ' -f 4,7 | tr ',' '.' | tr -d ' '` | bc

# Network interfaces (Link, Autoneg, Speed)
echo '<<<netif>>>'

ifconfig -au | sed '/^[a-z]/{x;p;x;}' | \
awk 'BEGIN { RS = "" ; FS = "\n" } \
!/^[lo|fw]/{ split($1,n,":"); name = n[1]; \
if ( match($0,/status: active/)) {status = "yes"} else {status = "no"} \
if ( match($0,/media: autoselect/)) {auto = "on"} else {auto = "off"} \
if ( match($0,/\<full-duplex\>/)) {duplex = "Full"} else {duplex = " "} \
if ( match($0,/[0-9]+baseT/)) {speed = substr($0,RSTART,RLENGTH-5)"Mb/s"} else {speed = " "} \
print name, speed, duplex, auto, status}'

# Network device statistics (Packets, Collisions, etc)
# only the "Link/Num" interface has all counters.
echo '<<<netctr>>>';
date +'%s'; netstat -inb | egrep -v '(^Name|lo|plip)' | grep Link | awk '{
print $1,$7,$5,$6,"0","0","0","0","0",$10,$8,$9,"0","0",$11,"0","0"; }'

# TCP Conn stats
echo '<<<tcp_conn_stats>>>'
netstat -ntfinet | awk ' /^tcp/ { c[$6]++; } END { for (x in c) { print x, c[x]; } }'

# IPMI-Daten (Luefter, CPU, Temperatur, etc)
if which ipmitool >/dev/null
then
    echo '<<<ipmi>>>'
    IPMI_FILE=$MK_CONFDIR/ipmitool_sensors.cache
    if [ ! -d $MK_CONFDIR ]; then
        mkdir -p $MK_CONFDIR
    fi

    # Do not use cache file after 20 minutes
    IPMI_MAXAGE=1200

    # Check if file exists and is recent enough
    if [ -s $IPMI_FILE ]
    then
        NOW=$(date +%s)
        MTIME=$(stat -c %Y $IPMI_FILE)
        if [ $((NOW - MTIME)) -le $IPMI_MAXAGE ] ; then
            USE_IPMI_FILE=1
        fi
    fi

    if [ -s "$IPMI_FILE" ]
    then
        grep -v 'command failed' "$IPMI_FILE" \
        | sed -e 's/ *| */|/g' -e "s/ /_/g" -e 's/_*$//' -e 's/|/ /g' \
        | egrep -v '^[^ ]+ na ' \
        | grep -v ' discrete '
    fi

    if [ -z "$USE_IPMI_FILE" -a ! -e "$IPMI_FILE.new" ]
    then
		bash -c "ipmitool sensor list | sed -e '1d' > $IPMI_FILE.new && mv $IPMI_FILE.new $IPMI_FILE || rm -f $IPMI_FILE*" &
		disown %1
	fi
fi

# NTP seems to be enabled as a default
echo '<<<ntp>>>'
ntpq -pn | sed -e 1,2d -e 's/^\(.\)/\1 /' -e 's/^ /%/'

# Checks for cups monitoring
if which lpstat > /dev/null 2>&1; then
		echo '<<<cups_queues>>>'
		waitmax 3 lpstat -p
		echo '---'
		for i in $(waitmax 3 lpstat -p | grep -E "^(printer|Drucker)" | awk '{print $2}' | grep -v "@"); do
				waitmax 3 lpstat -o "$i"
		done
fi
# Heartbeat monitoring
if which cl_status > /dev/null 2>&1; then
	# Different handling for heartbeat clusters with and without CRM
	# for the resource state
	if [ -S /var/run/heartbeat/crm/cib_ro ]; then
		echo '<<<heartbeat_crm>>>'
		crm_mon -1 -r | grep -v ^$
	else
		echo '<<<heartbeat_rscstatus>>>'
		cl_status rscstatus
	fi

	echo '<<<heartbeat_nodes>>>'
	for NODE in $(cl_status listnodes); do
		if [ $NODE != $HOSTNAME ]; then
			STATUS=$(cl_status nodestatus $NODE)
			echo -n "$NODE $STATUS"
			for LINK in $(cl_status listhblinks $NODE 2>/dev/null); do
				echo -n " $LINK $(cl_status hblinkstatus $NODE $LINK)"
			done
			echo
		fi
	done
fi

# Postfix mailqueue monitoring
#
# Only handle mailq when postfix user is present. The mailq command is also
# available when postfix is not installed. But it produces different outputs
# which are not handled by the check at the moment. So try to filter out the
# systems not using postfix by searching for the postfix user.a
#
# Cannot take the whole outout. This could produce several MB of agent output
# on blocking queues.
# Only handle the last 6 lines (includes the summary line at the bottom and
# the last message in the queue. The last message is not used at the moment
# but it could be used to get the timestamp of the last message.
if which mailq >/dev/null 2>&1 && getent passwd postfix >/dev/null 2>&1; then
	echo '<<<postfix_mailq>>>'
	mailq | tail -n 6
fi

# Einbinden von lokalen Plugins, die eine eigene Sektion ausgeben
if cd $PLUGINSDIR
then
	for skript in $(ls)
	do
		if [ -x "$skript" ] ; then
				./$skript
		fi
	done
fi

# Lokale Einzelchecks
echo '<<<local>>>'
if cd $LOCALDIR
then
	for skript in $(ls)
	do
		if [ -x "$skript" ] ; then
				./$skript
		fi
	done
fi

# MK's Remote Plugin Executor
if [ -e "$MK_CONFDIR/mrpe.cfg" ]
then
		echo '<<<mrpe>>>'
		grep -Ev '^[[:space:]]*($|#)' "$MK_CONFDIR/mrpe.cfg" | \
		while read descr cmdline
		do
				PLUGIN=${cmdline%% *}
				OUTPUT=$(eval "$cmdline")
				echo -n "(${PLUGIN##*/}) $descr $? $OUTPUT" | tr \\n \\1
				echo
		done
fi
